" File: ~/.vimrc
" Author: shawn<shawn@marskt.com>
" Description: shawn's personal vim config file.
" Last Modified: 
" Blog: http://www.marskt.com/
" Since: 2017-09-22
" Change:
" [+]new feature  [*]improvement  [!]change  [x]bug fix
"
" [*] 2010-11-23
"     改进 Vim7.3 相关的配置，使其支持 UNIX 系统
"
" [x] 2010-11-22
"     增加 void 配色，更改配色设置（蛋疼）
"
" [!] 2010-10-14
"     更改配色为 Son of Obsidian，参见 http://studiostyl.es/schemes/son-of-obsidian
"
" [+] 2009-02-12
"     初始化版本，啥时开始的无从考证 :^D
"

" Setup language {{{ ==========================================================
" =====================
" 多语言环境
"    默认为 UTF-8 编码
" =====================
if has("multi_byte")
    set encoding=utf-8
    " English messages only
    "language messages zh_CN.utf-8
    
    if has('win32')
        language english
        let &termencoding=&encoding
    endif

    set fencs=ucs-bom,utf-8,utf-16,gbk,big5,gb18030,latin1  "表示vim读取文件时，采用的编码识别序列，从左往右匹配。
    "set fenc=gb18030 表示保存文件的编码，默认为utf8,为保证windows中文系统读取，手动设置gb18030
    set formatoptions+=mM
    set nobomb " 不使用 Unicode 签名

    if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
        set ambiwidth=double
    endif
else
    echoerr "Sorry, this version of (g)vim was not compiled with +multi_byte"
endif
" language en_US.UTF-8           " Solve some plugins incompatibilities

" }}}

" DEIN {{{ ====================================================================
" =====================
" 配置DEIN管理器
"    安装对应的插件
" =====================
set nocompatible             " No to the total compatibility with the ancient vi

" Dein auto-installation and setup {{{

" Auto installing Dein
let iCanHazDein=1
let dein_readme = expand('~/.vim/dein/repos/github.com/Shougo/dein.vim/README.md')
if !filereadable(dein_readme)
    echo "Installing Dein..."
    echo ""
    silent !mkdir -p ~/.vim/dein
    silent !git clone https://github.com/Shougo/dein.vim ~/.vim/dein/repos/github.com/Shougo/dein.vim
    let iCanHazDein=0
endif


" Call Dein
if has('vim_starting')
    set rtp+=~/.vim/dein/repos/github.com/Shougo/dein.vim
endif
call dein#begin(expand('~/.vim/dein'))

" is better if Dein rules Dein (needed!)
call dein#add('Shougo/dein.vim')
" }}}

" PLUGINS (administrated by Dein) {{{

" Shougo's way {{{

" Vimproc to asynchronously run commands (Dein, Unite)
call dein#add('Shougo/vimproc', {'build' : 'make'})

" Unite. The interface to rule almost everything
call dein#add('Shougo/unite.vim')

" Unite sources
call dein#add('Shougo/unite-outline')
call dein#add('tsukkee/unite-help')
call dein#add('ujihisa/unite-colorscheme')
call dein#add('ujihisa/unite-locate')
call dein#add('thinca/vim-unite-history')
call dein#add('osyo-manga/unite-filetype')
call dein#add('osyo-manga/unite-quickfix')
call dein#add('osyo-manga/unite-fold')
call dein#add('tacroe/unite-mark')
call dein#add('Shougo/neomru.vim')

" File explorer (needed where ranger is not available)
call dein#add('Shougo/vimfiler', { 'on_cmd' : 'VimFiler'})

" Junk files
call dein#add('Shougo/junkfile.vim', {'on_cmd':'JunkfileOpen'})

" Unite plugin that provides command line completition
call dein#add('joedicastro/unite-cmdmatch')

" Unite plugin that provides spell suggestions
call dein#add('kopischke/unite-spell-suggest')
" }}}

" Colorschemes {{{

" Dark themes
" Improved terminal version of molokai, almost identical to the GUI one
call dein#add('joedicastro/vim-molokai256')

call dein#add('tomasr/molokai')
call dein#add('sjl/badwolf')
call dein#add('nielsmadan/harlequin')


" Light themes
call dein#add('vim-scripts/summerfruit256.vim')
call dein#add('joedicastro/vim-github256')

" Make terminal themes from GUI themes
" call dein#add('godlygeek/csapprox', {'on_cmd' : ['CSApprox', 'CSApproxSnapshot']})

" }}}

" DCVS {{{
"
" Admin Git
call dein#add('tpope/vim-fugitive')
" Show git repository changes in the current file
call dein#add('airblade/vim-gitgutter')
" Git viewer
call dein#add('gregsexton/gitv', {'depends':['tpope/vim-fugitive'], 'on_cmd':'Gitv'})
" Browse GitHub events in Vim
call dein#add('joedicastro/vim-github-dashboard')

" }}}

" Markdown & reStructuredText {{{

" Markdown Syntax
call dein#add('joedicastro/vim-markdown')
" Makes a Markdown Extra preview into the browser
call dein#add('joedicastro/vim-markdown-extra-preview')
" reStructuredText in vim. Your personal Wiki in RST
call dein#add('Rykka/riv.vim', {'on_ft': ['rst']})

" }}}

" Linux tools {{{

" A diff tool for directories
call dein#add('joedicastro/DirDiff.vim', { 'on_cmd' : 'DirDiff'})
" Hexadecimal editor
call dein#add('Shougo/vinarise.vim')

call dein#add('scrooloose/nerdtree')
" }}}

" Python {{{

" Autocompletion
call dein#add('Shougo/neocomplete.vim')
" A Python plugin
call dein#add('klen/python-mode', {'on_ft': ['python']})
" Admin virtualenvs
call dein#add('jmcantrell/vim-virtualenv')
" Show indent lines
call dein#add('Yggdroot/indentLine', {'on_ft': ['python']})
" Show reports from coverage.py
call dein#add('alfredodeza/coveragepy.vim', {'on_ft': ['python']})
" Sort imports
call dein#add('fisadev/vim-isort', {'autoload': {'filetypes': ['python']}})
" }}}

" Code Snippets {{{

" Powerful and advanced Snippets tool
call dein#add('SirVer/ultisnips')
" Snippets for Ultisnips
call dein#add('honza/vim-snippets')

" }}}

" Syntax {{{

call dein#add('elzr/vim-json', {'on_ft' : 'json'})
call dein#add('vim-scripts/po.vim--gray', {'on_ft': ['po']})
call dein#add('joedicastro/vim-pentadactyl', {'on_ft': ['pentadactyl']})
call dein#add('scrooloose/syntastic')

" }}}

" Open external links {{{

" Open a url into the browser or another files with an external app
call dein#add('vim-scripts/utl.vim')

" }}}

" Text edition {{{

" Autocompletion of (, [, {, ', ", ...
call dein#add('vim-scripts/delimitMate.vim')
" Smart and fast date changer
call dein#add('tpope/vim-speeddating')
" to surround vim objects with a pair of identical chars
call dein#add('tpope/vim-surround')
" extend repetitions by the 'dot' key
call dein#add('tpope/vim-repeat')
" toggle comments
call dein#add('tpope/vim-commentary')
" smart digraphs insertion
call dein#add('Rykka/easydigraph.vim')
" browse the vim undo tree
call dein#add('sjl/gundo.vim', {'on_cmd': 'GundoToggle'})
" to insert lorem ipsum blocks
call dein#add('vim-scripts/loremipsum', {'on_cmd': 'Loremipsum'})
" reveals all the character info, Unicode included
call dein#add('tpope/vim-characterize')
" transpose lines and text blocks
call dein#add('salsifis/vim-transpose', {'on_cmd' : 'Transpose'})
" marks admin
call dein#add('kshenoy/vim-signature')
" text-objects
call dein#add('kana/vim-textobj-entire') " ae, ie
call dein#add('kana/vim-textobj-indent') " ai, ii, aI, iI
call dein#add('kana/vim-textobj-lastpat') " a/, i/, a?, i?
call dein#add('kana/vim-textobj-line') " al, il
call dein#add('kana/vim-textobj-underscore') " a_, i_
call dein#add('kana/vim-textobj-user')

" }}}

" HTML/CSS {{{

" A smart and powerful Color Management tool. Needs to be loaded to be able
" to use the mappings
call dein#add('Rykka/colorv.vim', {
            \ 'on_cmd' : [
                             \ 'ColorV', 'ColorVView', 'ColorVPreview',
                             \ 'ColorVPicker', 'ColorVEdit', 'ColorVEditAll',
                             \ 'ColorVInsert', 'ColorVList', 'ColorVName',
                             \ 'ColorVScheme', 'ColorVSchemeFav',
                             \ 'ColorVSchemeNew', 'ColorVTurn2'],
            \ })

call dein#add('othree/html5.vim', {'on_ft': ['html', 'xhttml', 'css']})

call dein#add('mattn/emmet-vim', 
            \ {'on_ft': ['html', 'xhttml', 'css', 'xml', 'xls', 'markdown']})

call dein#add('kchmck/vim-coffee-script', {
            \ 'on_cmd' : [
                             \ 'CoffeeCompile', 'CoffeeLint', 'CoffeeMake',
                             \ 'CoffeeRun', 'CoffeeWatch'],
            \ 'filetypes' : ['coffee']
            \ })

" }}}

" GUI {{{

" A better looking status line
call dein#add('vim-airline/vim-airline')
call dein#add('vim-airline/vim-airline-themes')
" Zooms a window
call dein#add('vim-scripts/zoomwintab.vim', {'on_cmd' : 'ZoomWinTabToggle'})
" easily window resizing
call dein#add('jimsei/winresizer')

" }}}

" Tmux {{{

" Easily interacts with Tmux from Vim
call dein#add('benmills/vimux')
" Tmux config file syntax
call dein#add('vimez/vim-tmux', { 'on_ft' : 'conf'})

" }}}

" API Web {{{

call dein#add('mattn/webapi-vim')

" }}}

" DBMS {{{

call dein#add('joedicastro/dbext.vim', { 'on_ft' : 'sql'})

" }}}

" END BUNDLES }}}

call dein#end()

" Auto install the Plugins {{{

" First-time plugins installation
if iCanHazDein == 0
    echo "Installing Bundles, please ignore key map error messages"
    echo ""
    set nomore
    call dein#install()
endif

" Check if all of the plugins are already installed, in other case it will
" install them (useful to add plugins in the .vimrc)
if  dein#check_install() 
    call dein#install() 
endif

" }}}

filetype plugin indent on      " Indent and plugins by filetype

" END DEIN }}}

" VIM Setup {{{ ===============================================================
" =====================
" VIM通用设置
"  
" =====================
" <Leader> & <LocalLeader> mapping {{{

let mapleader=','
let maplocalleader= ' '

" }}}

" Basic options {{{

scriptencoding utf-8
set encoding=utf-8              " setup the encoding to UTF-8
set ls=2                        " status line always visible
set ch=1			   " 命令行于状态行
set stl=\ [File]\ %F%m%r%h%y[%{&fileformat},%{&fileencoding}]\ %w\ \ [PWD]\ %r%{GetPWD()}%h\ %=\ [Line]%l/%L\ %=\[%P]
" set go-=T                       " hide the toolbar
" set go-=m                       " hide the menu
" The next two lines are quite tricky, but in Gvim, if you don't do this, if you
" only hide all the scrollbars, the vertical scrollbar is showed anyway
" set go+=rRlLbh                  " show all the scrollbars
" set go-=rRlLbh                  " hide all the scrollbars

if has('mouse')
      set mouse-=a		" 设定在任何模式下鼠标都可用
endif

" 返回当前时期,插入模式按 F4 插入当前时间
func! GetDateStamp()
    return strftime('%Y-%m-%d')
endfunction
imap <f4> <C-r>=GetDateStamp()<cr>

" 全选
func! SelectAll()
    let s:current = line('.')
    exe "norm gg" . (&slm == "" ? "VG" : "gH\<C-O>G")
endfunc

" From an idea by Michael Naumann
func! VisualSearch(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunc


" 永久撤销，Vim7.3 新特性
if has('persistent_undo')
    set undofile

    " 设置撤销文件的存放的目录
    if has("unix")
        set undodir=/tmp/,~/tmp,~/Temp
    else
        set undodir=d:/temp/
    endif
    set undolevels=1000
    set undoreload=10000
endif


" set visualbell                  " turn on the visual bell
set noerrorbells
set novisualbell
set t_vb= "close visual bell	" 控制台响铃
set cursorline                  " highlight the line under the cursor 为光标所在行加下划线
set fillchars+=vert:│           " better looking for windows separator 被分割窗口之间显示空白
set ttyfast                     " better screen redraw
set title                       " set the terminal title to the current file
set showcmd                     " shows partial commands
set hidden                      " hide the inactive buffers
set ruler                       " sets a permanent rule
set rulerformat=%15(%c%V\ %p%%%)

set lazyredraw                  " only redraws if it is needed
set autoread                    " update a open file edited outside of Vim
set ttimeoutlen=0               " toggle between modes almost instantly
set backspace=indent,eol,start  " defines the backspace key behavior
set virtualedit=all             " to edit where there is no actual character
set more                        " to show pages using `more` in command outpouts

" }}}

" Searching {{{

set incsearch                   " incremental searching
set showmatch                   " show pairs match
set hlsearch                    " highlight search results
set smartcase                   " smart case ignore
set ignorecase                  " ignore case letters

" }}}

" History and permanent undo levels {{{

set history=1000
set undofile
set undoreload=1000

" }}}

" Make a dir if no exists {{{

function! MakeDirIfNoExists(path)
    if !isdirectory(expand(a:path))
        call mkdir(expand(a:path), "p")
    endif
endfunction

" }}}

" Backups {{{

set backup
set noswapfile
set backupdir=$HOME/.vim/tmp/backup/
set undodir=$HOME/.vim/tmp/undo/
set directory=$HOME/.vim/tmp/swap/
set viminfo+=n$HOME/.vim/tmp/viminfo

" make this dirs if no exists previously
silent! call MakeDirIfNoExists(&undodir)
silent! call MakeDirIfNoExists(&backupdir)
silent! call MakeDirIfNoExists(&directory)

" }}}

" Wildmenu {{{

set wildmenu                        " Command line autocompletion
set wildmode=list:longest,full      " Shows all the options

set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.bak,*.?~,*.??~,*.???~,*.~      " Backup files
set wildignore+=*.luac                           " Lua byte code
set wildignore+=*.jar                            " java archives
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.stats                          " Pylint stats

" }}}

" Tabs, space and wrapping {{{

set expandtab                  " spaces instead of tabs
set tabstop=4                  " a tab = four spaces
set shiftwidth=4               " number of spaces for auto-indent
set softtabstop=4              " a soft-tab of four spaces
set autoindent                 " set on the auto-indent

" set formatoptions=qrn1ct
set linebreak
set textwidth=80
set colorcolumn=81


function! ToggleWrap()
    let s:nowrap_cc_bg = [22, '#005f00']
    redir => s:curr_cc_hi
    silent hi ColorColumn
    redir END
    let s:curr_cc_ctermbg = matchstr(s:curr_cc_hi, 'ctermbg=\zs.\{-}\s\ze\1')
    let s:curr_cc_guibg = matchstr(s:curr_cc_hi, 'guibg=\zs.\{-}\_$\ze\1')
    if s:curr_cc_ctermbg != s:nowrap_cc_bg[0]
        let g:curr_cc_ctermbg = s:curr_cc_ctermbg
    endif
    if s:curr_cc_guibg != s:nowrap_cc_bg[1]
        let g:curr_cc_guibg = s:curr_cc_guibg
    endif
    if &textwidth == 80
        set textwidth=0
        exec 'hi ColorColumn ctermbg='.s:nowrap_cc_bg[0].
                    \' guibg='.s:nowrap_cc_bg[1]
    elseif &textwidth == 0
        set textwidth=80
        exec 'hi ColorColumn ctermbg='.g:curr_cc_ctermbg.
                    \' guibg='.g:curr_cc_guibg
    endif
endfunction

nmap <silent><Leader>ew :call ToggleWrap()<CR>

" }}}

" Ok, a vim for men, get off the cursor keys {{{

nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" }}}

" Colorscheme {{{

" syntax enable                  " enable the syntax highlight
" set background=dark            " set a dark background
" set t_Co=256                   " 256 colors for the terminal
" if has('gui_running')
"     colorscheme molokai
" else
"     colorscheme molokai256
" endif

" }}}

" Font {{{

set guifont=Dejavu\ Sans\ Mono\ for\ Powerline\ 11

" }}}

" Resize the divisions if the Vim window size changes {{{

au VimResized * exe "normal! \<c-w>="

" }}}

" New windows {{{

nnoremap <Leader>v <C-w>v
nnoremap <Leader>h <C-w>s

" }}}

" Fast window moves {{{

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" }}}

" Fast window & buffer close and kill {{{

nnoremap <Leader>k <C-w>c
nnoremap <silent><Leader>K :bd<CR>

" }}}

" Toggle line numbers {{{

nnoremap <silent><Leader>l :call ToggleRelativeAbsoluteNumber()<CR>
function! ToggleRelativeAbsoluteNumber()
  if !&number && !&relativenumber
      set number
      set norelativenumber
  elseif &number && !&relativenumber
      set nonumber
      set relativenumber
  elseif !&number && &relativenumber
      set number
      set relativenumber
  elseif &number && &relativenumber
      set nonumber
      set norelativenumber
  endif
endfunction

" }}}

" Show hidden chars {{{

"nmap <Leader>eh :set list!<CR>
"set listchars=tab:→\ ,eol:�1�76�1�71,trail:·,extends:�1�76�1�73,precedes:�1�76�1�72

" }}}

" Folding {{{

set foldmethod=marker

" Toggle folding

nnoremap \ za
vnoremap \ za

" }}}

" Cut/Paste {{{

" to/from the clipboard
map <Leader>y "*y
map <Leader>p "*p

" toggle paste mode
map <Leader>P :set invpaste<CR>

" }}}

" Autoload configuration when this file changes ($MYVIMRC) {{{

autocmd! BufWritePost vimrc source %

" }}}

" Spelling {{{

" turn on the spell checking and set the Spanish language
nmap <Leader>ss :setlocal spell spelllang=es<CR>
" turn on the spell checking and set the English language
nmap <Leader>se :setlocal spell spelllang=en<CR>
" turn off the spell checking
nmap <Leader>so :setlocal nospell <CR>
" jump to the next bad spell word
nmap <Leader>sn ]s
" suggest words
" nmap <Leader>sp z=
nmap <Leader>sp :Unite spell_suggest<CR>
" jump to the next bad spell word and suggests a correct one
" nmap <Leader>sc ]sz=
nmap <Leader>sc ]s :Unite spell_suggest<CR>
" add word to the dictionary
nmap <Leader>sa zg
" }}}

" Save as root {{{

cmap w!! w !sudo tee % >/dev/null<CR>:e!<CR><CR>

" }}}

" Quick saving {{{

nmap <silent> <Leader>w :update<CR>

" }}}

" Delete trailing whitespaces {{{

nmap <silent><Leader>et :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" }}}

" Use Ranger as a file explorer {{{

fun! RangerChooser()
    exec "silent !ranger --choosefile=/tmp/chosenfile " . expand("%:p:h")
    if filereadable('/tmp/chosenfile')
        exec 'edit ' . system('cat /tmp/chosenfile')
        call system('rm /tmp/chosenfile')
    endif
    redraw!
endfun
map <Leader>x :call RangerChooser()<CR>
" }}}

" Toggle the Quickfix window {{{

function! s:QuickfixToggle()
    for i in range(1, winnr('$'))
        let bnum = winbufnr(i)
        if getbufvar(bnum, '&buftype') == 'quickfix'
            cclose
            lclose
            return
        endif
    endfor
    copen
endfunction
command! ToggleQuickfix call <SID>QuickfixToggle()

nnoremap <silent> <Leader>q :ToggleQuickfix<CR>

" }}}

" Text statistics {{{

" get the total of lines, words, chars and bytes (and for the current position)
map <Leader>es g<C-G>

" get the word frequency in the text
function! WordFrequency() range
  let all = split(join(getline(a:firstline, a:lastline)), '\A\+')
  let frequencies = {}
  for word in all
    let frequencies[word] = get(frequencies, word, 0) + 1
  endfor
  let lst = []
  for [key,value] in items(frequencies)
    call add(lst, value."\t".key."\n")
  endfor
  call sort(lst)
  echo join(lst)
endfunction
command! -range=% WordFrequency <line1>,<line2>call WordFrequency()
map <Leader>ef :Unite output:WordFrequency<CR>

" }}}

" Count lines of code {{{

function! LinesOfCode()
    echo system('cloc --quiet '.bufname("%"))
endfunction

"}}}

" Toggle the search results highlighting {{{

map <silent><Leader>eq :set invhlsearch<CR>

" }}}

" Move between Vim and Tmux windows {{{

if exists('$TMUX')
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      " The sleep and & gives time to get back to vim so tmux's focus tracking
      " can kick in and send us our ^[[O
      execute "silent !sh -c 'sleep 0.01; tmux select-pane -" . a:tmuxdir . "' &"
      redraw!
    endif
  endfunction
  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te
  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<CR>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<CR>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<CR>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<CR>
else
  map <C-h> <C-w>h
  map <C-j> <C-w>j
  map <C-k> <C-w>k
  map <C-l> <C-w>l
endif

" }}}

" Quick exiting without save {{{

nnoremap <Leader>`` :qa!<CR>

" }}}

" Execution permissions by default to shebang (#!) files {{{

augroup shebang_chmod
  autocmd!
  autocmd BufNewFile  * let b:brand_new_file = 1
  autocmd BufWritePost * unlet! b:brand_new_file
  autocmd BufWritePre *
        \ if exists('b:brand_new_file') |
        \   if getline(1) =~ '^#!' |
        \     let b:chmod_post = '+x' |
        \   endif |
        \ endif
  autocmd BufWritePost,FileWritePost *
        \ if exists('b:chmod_post') && executable('chmod') |
        \   silent! execute '!chmod '.b:chmod_post.' "<afile>"' |
        \   unlet b:chmod_post |
        \ endif
augroup END

" }}}

" Load matchit by default {{{

if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

" }}}

" Make the Y behavior similar to D & C {{{

nnoremap Y y$

" }}}

" END VIM SETUP }}}



" =========
" AutoCmd
" =========
if has("autocmd")
    filetype plugin indent on

    " 括号自动补全
    func! AutoClose()
        :inoremap ( ()<ESC>i
        :inoremap " ""<ESC>i
        :inoremap ' ''<ESC>i
        :inoremap { {}<ESC>i
        :inoremap [ []<ESC>i
        :inoremap ) <c-r>=ClosePair(')')<CR>
        :inoremap } <c-r>=ClosePair('}')<CR>
        :inoremap ] <c-r>=ClosePair(']')<CR>
    endf

    func! ClosePair(char)
        if getline('.')[col('.') - 1] == a:char
            return "\<Right>"
        else
            return a:char
        endif
    endf

    augroup vimrcEx
        au!
        autocmd FileType text setlocal textwidth=80
        autocmd BufReadPost *
                    \ if line("'\"") > 0 && line("'\"") <= line("$") |
                    \   exe "normal g`\"" |
                    \ endif
    augroup END

    " Auto close quotation marks for PHP, Javascript, etc, file
    au FileType php,javascript exe AutoClose()

    " Auto Check Syntax
    au BufWritePost,FileWritePost *.js,*.php call CheckSyntax(1)

    " JavaScript 语法高亮
    au FileType html,javascript let g:javascript_enable_domhtmlcss = 1
    au BufRead,BufNewFile *.js setf jquery

    " 给各语言文件添加 Dict
    if has('win32')
        let s:dict_dir = $VIM.'\vimfiles\dict\'
    else
        let s:dict_dir = $HOME."/.vim/dict/"
    endif
    let s:dict_dir = "setlocal dict+=".s:dict_dir

    au FileType php exec s:dict_dir."php_funclist.dict"
    au FileType css exec s:dict_dir."css.dict"
    au FileType javascript exec s:dict_dir."javascript.dict"

    " 格式化 JavaScript 文件
    au FileType javascript map <f12> :call g:Jsbeautify()<cr>
    au FileType javascript set omnifunc=javascriptcomplete#CompleteJS

    " 增加 ActionScript 语法支持
    au BufNewFile,BufRead,BufEnter,WinEnter,FileType *.as setf actionscript 

    " CSS3 语法支持
    au BufRead,BufNewFile *.css set ft=css syntax=css3

    " 增加 Objective-C 语法支持
    au BufNewFile,BufRead,BufEnter,WinEnter,FileType *.m,*.h setf objc

    " 将指定文件的换行符转换成 UNIX 格式
    au FileType php,javascript,html,css,python,vim,vimwiki set ff=unix


" =============
" Key Shortcut
" =============
nmap <C-t>   :tabnew<cr>
nmap <C-p>   :tabprevious<cr>
nmap <C-n>   :tabnext<cr>
nmap <C-k>   :tabclose<cr>
nmap <C-Tab> :tabnext<cr> 

"for i in range(1, &tabpagemax)
"    exec 'nmap <A-'.i.'> '.i.'gt'
"endfor

" 插件快捷键
nmap <C-d> :NERDTree<cr>
nmap <C-e> :BufExplorer<cr>
nmap <f2>  :BufExplorer<cr>


" 新建 XHTML 、PHP、Javascript 文件的快捷键
nmap <C-c><C-h> :NewQuickTemplateTab xhtml<cr>
nmap <C-c><C-p> :NewQuickTemplateTab php<cr>
nmap <C-c><C-j> :NewQuickTemplateTab javascript<cr>
nmap <C-c><C-c> :NewQuickTemplateTab css<cr>
nmap <Leader>ca :Calendar<cr>
nmap <Leader>mr :MRU<cr>
nmap <Leader>dd :NERDTree<cr>
nmap <Leader>bf :BufExplorer<cr>

" 直接查看第一行生效的代码
nmap <C-g><C-f> :call GotoFirstEffectiveLine()<cr>

" 按下 Q 不进入 Ex 模式，而是退出
nmap Q :x<cr>


" =================
" Plugin Configure
" =================
" Javascript in CheckSyntax
if has('win32')
    let g:checksyntax_cmd_javascript  = 'jsl -conf '.shellescape($VIM . '\vimfiles\plugin\jsl.conf')
else
    let g:checksyntax_cmd_javascript  = 'jsl -conf ~/.vim/plugin/jsl.conf'
endif
let g:checksyntax_cmd_javascript .= ' -nofilelisting -nocontext -nosummary -nologo -process'

" VIM HTML 插件
let g:no_html_toolbar = 'yes'

" VimWiki 配置
if !exists("g:vimwiki_list")
    let g:vimwiki_list = [
                \{"path": "~/Wiki/Default/", "path_html": "~/Sites/wiki/",  
                \   "html_footer": "~/Wiki/Default/footer.tpl", "html_header": "~/Wiki/Default/header.tpl",
                \   "auto_export": 1},
                \{"path": "~/Wiki/WebWW/",   "path_html": "~/Sites/webww/", "auto_export": 1}
                \]
    let g:vimwiki_valid_html_tags='b,i,s,u,sub,sup,kbd,br,hr,div,del,code,img'
    let g:vimwiki_auto_checkbox = 0
    if has('win32')
        " 注意！
        " 1、如果在 Windows 下，盘符必须大写
        " 2、路径末尾最好加上目录分隔符
        let s:vimwiki_root = "D://Documents//My Dropbox//Dropbox//Vimwiki"
        let g:vimwiki_list = [
                    \{"path": s:vimwiki_root."/Default/", 
                    \   "html_footer": s:vimwiki_root."/Default/footer.tpl", 
                    \   "html_header": s:vimwiki_root."/Default/header.tpl",
                    \   "path_html": s:vimwiki_root."/Default/_output/", "auto_export": 1},
                    \{"path": s:vimwiki_root."/WebWW/", 
                    \"path_html": s:vimwiki_root."/WebWW/html/",   "auto_export": 1}
                    \]
        let g:vimwiki_w32_dir_enc = 'cp936'
    endif

    au FileType vimwiki set ff=unix fenc=utf8 noswapfile nobackup
    au FileType vimwiki imap <C-t> <c-r>=TriggerSnippet()<cr>

    nmap <C-i><C-i> :VimwikiTabGoHome<cr>
    nmap <Leader>ii :VimwikiTabGoHome<cr>
endif

" on Windows, default charset is gbk
if has("win32")
    let g:fontsize#encoding = "cp936"
endif


" =============
" Color Scheme
" =============

if has('syntax')
    if has('gui_running')
       set background=dark     "夜间模式
    else
       set background=light    "白天模式
    endif

    " http://ethanschoonover.com/solarized
    " colorscheme solarized
     "colorscheme murphy
    " 默认编辑器配色
    " au BufNewFile,BufRead,BufEnter,WinEnter * colo murphy
    "au BufNewFile,BufRead,BufEnter,WinEnter * colo solarized
    au BufNewFile,BufRead,BufEnter,WinEnter * colo molokai
    " 各不同类型的文件配色不同
    au BufNewFile,BufRead,BufEnter,WinEnter *.wiki colo void

    " 保证语法高亮
    syntax on
endif
if has('unix')
     set t_Co=256
endif
" =============
" C的编译和运行
" ============
map <F4> :call CompileRunGcc()<CR>
func! CompileRunGcc()
exec "w"
exec "!gcc % -o %<"
exec "! %<"
endfunc

"---------------------------------------------------------------
" vundle使用方法
" filetype off                  " required
" 
" set rtp+=~/.vim/bundle/Vundle.vim
" call vundle#begin()
" Plugin 'gmarik/Vundle.vim'
" Plugin 'scrooloose/nerdtree'
" " 这个插件可以显示文件的Git增删状态
" Plugin 'Xuyuanp/nerdtree-git-plugin'
" Plugin 'Shougo/neocomplete.vim'
" call vundle#end()            " required
" filetype plugin indent on    " required
"------------------------------------------------------------

" Neocomplete {{{

let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_refresh_always = 1
let g:neocomplete#max_list = 30
let g:neocomplete#min_keyword_length = 1
let g:neocomplete#sources#syntax#min_keyword_length = 1
let g:neocomplete#data_directory = $HOME.'/.vim/tmp/neocomplete'

" disable the auto select feature by default to speed up writing without
" obstacles (is optimal for certain situations)
let g:neocomplete#enable_auto_select = 0

" toggle the auto select feature
function! ToggleNeoComplete()
  if !g:neocomplete#disable_auto_complete && g:neocomplete#enable_auto_select
      let g:neocomplete#disable_auto_complete = 0
      let g:neocomplete#enable_auto_select = 0
  elseif !g:neocomplete#disable_auto_complete && !g:neocomplete#enable_auto_select
      let g:neocomplete#disable_auto_complete = 1
      let g:neocomplete#enable_auto_select = 0
  elseif g:neocomplete#disable_auto_complete && !g:neocomplete#enable_auto_select
      let g:neocomplete#disable_auto_complete = 0
      let g:neocomplete#enable_auto_select = 1
  endif
endfunction
nnoremap <silent><Leader>ea :call ToggleNeoComplete()<CR>

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
endif

let g:neocomplete#sources#omni#input_patterns.python='[^. \t]\.\w*'

" }}}
endif
" vim: set et sw=4 ts=4 sts=4 fdm=marker ft=vim ff=unix fenc=utf8:
